services:
  user-management:
    build:
      context: ./user-management
      dockerfile: Dockerfile
    container_name: user-management
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KEYCLOAK_INTERNAL_URI: http://keycloak:8080
      KEYCLOAK_EXTERNAL_URI: http://localhost:8888
      INTERNAL_CLIENT_ID: order-service
      INTERNAL_CLIENT_SECRET: QAK9K2j1lorVuTt95cdHmPGifZnrFsuq
      INTERNAL_TOKEN_URI: http://keycloak:8080/realms/management-realm/protocol/openid-connect/token
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI: http://localhost:8888/realms/management-realm
      SPRING_SECURITY_OAUTH2_CLIENT_ID: user-service
      SPRING_SECURITY_OAUTH2_CLIENT_SECRET: Jn0R3ZzztVbr4n5JJkRttXQOLnpxB6ix
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:19092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/user_service
      SPRING_DATASOURCE_USERNAME: user_service
      SPRING_DATASOURCE_PASSWORD: user_service_password
      HAZELCAST_CLUSTER_NAME: dev
    networks:
      - microservices-network
    depends_on:
      keycloak:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      hazelcast:
        condition: service_healthy

  order-management:
    build:
      context: ./order-management
      dockerfile: Dockerfile
    container_name: order-management
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KEYCLOAK_INTERNAL_URI: http://keycloak:8080
      KEYCLOAK_EXTERNAL_URI: http://localhost:8888
      INTERNAL_CLIENT_ID: user-service
      INTERNAL_CLIENT_SECRET: Jn0R3ZzztVbr4n5JJkRttXQOLnpxB6ix
      INTERNAL_TOKEN_URI: http://keycloak:8080/realms/management-realm/protocol/openid-connect/token
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI: http://localhost:8888/realms/management-realm
      SPRING_SECURITY_OAUTH2_CLIENT_ID: order-service
      SPRING_SECURITY_OAUTH2_CLIENT_SECRET: QAK9K2j1lorVuTt95cdHmPGifZnrFsuq
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:19092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/user_service
      SPRING_DATASOURCE_USERNAME: order_service
      SPRING_DATASOURCE_PASSWORD: order_service_password
      HAZELCAST_CLUSTER_NAME: dev
    networks:
      - microservices-network
    depends_on:
      keycloak:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      hazelcast:
        condition: service_healthy

  keycloak:
    build:
      context: .
      dockerfile: Dockerfile.keycloak
    container_name: keycloak
    ports:
      - "8888:8080"
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KC_DB_SCHEMA: public
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_TRANSACTION_XA_ENABLED: "true"
      KC_TRANSACTION_JTA_ENABLED: "true"
      KC_TRANSACTION_XA_RECOVERY_NODES: "all"
      KC_TRANSACTION_RECOVERY_ENABLED: "true"
      KC_TRANSACTION_RECOVERY_DIR: /opt/keycloak/data/transaction-logs
      KC_FEATURES: scripts
    command:
      - start-dev
      - --import-realm
      - --http-enabled=true
      - --hostname-strict=false
      - --hostname-strict-https=false
    volumes:
      - ./migration/keycloak/management-realm.json:/opt/keycloak/data/import/management-realm.json:ro
      - keycloak_transaction_logs:/opt/keycloak/data/transaction-logs
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/realms/management-realm/.well-known/openid-configuration"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: test
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - ./migration/postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "myuser", "-d", "test"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_MAX_REQUEST_SIZE: 200000000
      KAFKA_MESSAGE_MAX_BYTES: 200000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 200000000
    depends_on:
      - zookeeper
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
    ports:
      - "22181:2181"
    networks:
      - microservices-network

  hazelcast:
    image: hazelcast/hazelcast:5.5.0
    container_name: hazelcast
    ports:
      - "5701:5701"
    environment:
      HZ_CLUSTER_NAME: dev
    volumes:
      - ./migration/hazelcast/hazelcast.yaml:/opt/hazelcast/config/hazelcast.yaml
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5701/hazelcast/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  keycloak_transaction_logs:

networks:
  microservices-network:
    name: microservices-network
    driver: bridge
